// ==UserScript==
// @name         Crypto Kitty Info Extension
// @namespace    https://github.com/HaJaeKyung/KittyExtension
// @version      0.29
// @description  Adds stat info to the site
// @author       HaJaeKyung
// @match        *.cryptokitties.co/*
// @grant        none
// @require      https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.18.2/babel.js
// @require      http://code.jquery.com/jquery-3.2.1.min.js
// ==/UserScript==

/* jshint ignore:start */
var inline_src = (<><![CDATA[
/* jshint ignore:end */
    /* jshint esnext: false */
    /* jshint esversion: 6 */

    // Your code here...

/* jshint ignore:start */
]]></>).toString();
var c = Babel.transform(inline_src, { presets: [ "es2015", "es2016" ] });
eval(c.code);
/* jshint ignore:end */

$(document).ready(() => {
    console.log('CryptoKitties Extension Loaded');
    $("head").append("<style> .extAttUl { overflow: visible; z-index: 3;  padding: 0px; margin: 0px; } </style>");
    $("head").append("<style> .extAtt { padding-left: 2px; padding-right: 2px; color: rgb(42, 40, 37); text-align: center; line-height: 1.85rem; font-size: 1.6rem; border-style: solid; border-color: rgba(66, 66, 66, 0.35); border-width: 1.5px; border-radius: 20px; background-color: #a7ffeb; } </style>");
    $("head").append("<style> .extBounce {animation: mover 1s infinite  alternate; padding-right: 2px;} @keyframes mover {0% { transform: translateY(0); }100% { transform: translateY(-6px); } </style>");
    $("head").append("<style> .extWrapper {position:absolute; bottom: 0; right: 0; display: flex; flex-direction: row-reverse; align-items: flex-end; } </style>");
    $("head").append("<style> .extUSD {  position:absolute; top:0; left:0; } </style>");
    $("head").append("<style> .KittyCard { overflow: visible; } </style>");
    const version = "0.29";
    let foundId = [];
    let curCat = 'n/a';
    let curId = 'n/a';
    let hasChanged = false;
    let ethPrice = false;
    let url = location.href;
    document.body.addEventListener('click', () => {
        requestAnimationFrame(()=> {
            if (url!==location.href) {
                //Clears id cache on page change
                foundId = [];
                url = location.href;
            }
        });
    }, true);
    let tbl = {"oldlace":{"count":0.0016},"wolfgrey":{"count":0.0047},"gerbil":{"count":0.0147},"cottoncandy":{"count":0.0171},"violet":{"count":0.0683},"wingtips":{"count":0.2701},"mainecoon":{"count":0.3974},"jaguar":{"count":0.6015},"googly":{"count":0.6745},"whixtensions":{"count":0.9136},"cerulian":{"count":0.9213},"chartreux":{"count":1.1728},"fabulous":{"count":1.5252},"peach":{"count":2.6692},"bubblegum":{"count":3.5098},"gold":{"count":3.5812},"dali":{"count":3.7225},"otaku":{"count":4.0896},"scarlet":{"count":4.8262},"bloodred":{"count":4.8906},"skyblue":{"count":4.9178},"tigerpunk":{"count":5.8166},"limegreen":{"count":5.9649},"emeraldgreen":{"count":6.6518},"spock":{"count":6.8373},"beard":{"count":6.8683},"cloudwhite":{"count":7.1586},"laperm":{"count":7.7384},"calicool":{"count":7.7966},"barkbrown":{"count":7.889},"chestnut":{"count":8.8281},"mauveover":{"count":8.8398},"tongue":{"count":9.796},"cymric":{"count":10.5334},"saycheese":{"count":13.3749},"shadowgrey":{"count":13.6831},"coffee":{"count":13.7304},"salmon":{"count":14.6269},"royalpurple":{"count":15.0095},"mintgreen":{"count":16.1404},"chocolate":{"count":16.2879},"swampgreen":{"count":16.4781},"lemonade":{"count":16.7466},"topaz":{"count":16.8592},"sphynx":{"count":16.9996},"simple":{"count":17.0485},"orangesoda":{"count":17.1851},"aquamarine":{"count":17.5119},"munchkin":{"count":17.6811},"greymatter":{"count":17.8674},"raisedbrow":{"count":18.6707},"happygokitty":{"count":19.8319},"soserious":{"count":20.2976},"strawberry":{"count":20.4489},"ragamuffin":{"count":20.7959},"sizzurp":{"count":21.5247},"himalayan":{"count":21.586},"pouty":{"count":22.0176},"crazy":{"count":27.1147},"thicccbrowz":{"count":27.4523},"luckystripe":{"count":29.8856},"kittencream":{"count":41.0826},"granitegrey":{"count":41.5568},"totesbasic":{"count":45.9065}};

    function saveStorage(id, cattributes) {
        if (window.location.pathname == "/my-kitties") {
            storageMyTbl['id'+id] = cattributes;
            localStorage.setItem('kittyExtensionMyTbl', JSON.stringify(storageMyTbl));
        } else {
            storageTbl['id'+id] = cattributes;
            if (Object.keys(storageTbl).length > 1000) {
                for (let first in storageTbl) break;
                delete storageTbl[first];
            }
            localStorage.setItem('kittyExtensionTbl', JSON.stringify(storageTbl));
        }
    }
    function checkVersion(){
        if(hasLocalStorage){
            let savedVersion = localStorage.getItem('kittyExtensionVersion') || 0;
            if (savedVersion !== version){
                localStorage.setItem('kittyExtensionTbl', JSON.stringify({}));
                localStorage.setItem('kittyExtensionMyTbl', JSON.stringify({}));
                localStorage.setItem('kittyExtensionVersion', version);
                console.log('New version loaded:',version);
            }
        }
    }

    let hasLocalStorage = typeof(Storage) !== "undefined";
    checkVersion();
    let storageTbl = JSON.parse(localStorage.getItem('kittyExtensionTbl')) || {};
    let storageMyTbl = JSON.parse(localStorage.getItem('kittyExtensionMyTbl')) || {};
    let currency = localStorage.getItem('kittyExtensionEtherUSD') || "üí≤üëé";

    $.get("https://api.coinmarketcap.com/v1/ticker/ethereum/", data => {
        ethPrice =  parseInt(data[0].price_usd);
        $("body").append("<button onclick='switchPrice(event)' class='extUSD extAtt'>"+currency+"</button>");
        changePrices();
    });
    function getColor(catt) {
        let color, count;
        if (tbl[catt]) {
            if (tbl[catt].count <= 0.15) {
                color = "#ff0dbf"; // legendary
            } else if (tbl[catt].count <= 1.2) {
                color = "#ff8000"; // legendary
            } else if (tbl[catt].count < 5) {
                color = "#a335ee"; // epic
            } else if (tbl[catt].count <= 12) {
                color = "#0070ff"; // rare
            } else if (tbl[catt].count <= 20) {
                color = "white";   // common
            } else {
                color = "white";   // common
            }
            count = tbl[catt].count < 1 ? tbl[catt].count.toFixed(3) : tbl[catt].count.toFixed(1);
            count = tbl[catt].count <= 20 ? " ("+ count +"%)" : " (20%+)";
        } else {
            color = "#ff0dbf";
            count = " (Ultra%)";
        }
        return [color, count];
    }

    function requestId(element, stats) {
        $.getJSON( "https://api.cryptokitties.co/kitties/"+stats.id, data => {
            finalizeOverlay(data.cattributes, element, stats);
            if (hasLocalStorage) {
                saveStorage(stats.id, data.cattributes);
            }
        }).fail(() => {
            let ul = element.getElementsByClassName("extAttUl")[0];
            ul.classList.remove("extBounce");
            ul.innerHTML = "üòø";
        });
    }

    function finalizeOverlay(cattributes, element, stats) {
        let ul = element.getElementsByClassName("extAttUl")[0];
        ul.classList.remove("extBounce");
        ul.innerHTML = "";
        for (let x in cattributes) {
            if (cattributes[x]) {
                let background_color = getColor(cattributes[x].description)[0];
                let color = background_color == 'white' ? 'rgb(42, 40, 37)' : '#fff';
                ul.innerHTML += "<li class='extAtt' style=\'background-color:"+background_color+"; color: "+color+"\'>"+cattributes[x].description+"</li>";
            }
        }

        if (window.location.hostname == 'www.cryptokitties.co') {
            calcPrice(stats.id , cattributes, stats, element);
        }
    }

    function isValidId(id) {
      return !isNaN(id) && id !== "" && id.substring(0,2) != "0x" && id != curId && !foundId.includes(id) && !document.URL.includes("activity");
    }

    //Creates overlay on hover
    function overlay() {
        let nativeElement = $( this )[0];
        let id = /[^/]*$/.exec(nativeElement)[0];
        if (isValidId(id)) {
            console.log();
            console.log();
            curId = id;
            foundId.push(id);
            let mainSite = window.location.hostname == 'www.cryptokitties.co';
            let element = mainSite ? nativeElement.getElementsByClassName('KittyCard')[0] : nativeElement;
            if (element) {
                let stats = {"id": curId, "fast":false, "gen": false, "cd": false};
                if (mainSite) {
                    let status = nativeElement.getElementsByClassName('KittyCard-status')[0];
                    if (status) {
                        stats.cd = status.innerHTML.includes("Resting");
                    }
                    let speed = nativeElement.getElementsByClassName('KittyCard-coldown')[0];
                    if (speed) {
                        let cdTbl = ["Fast", "Swift", "Snappy", "Brisk", "Plodding", "Slow", "Sluggish", "Catatonic"];
                        stats.fast = cdTbl.indexOf(speed.innerText);
                    }
                    stats.gen = nativeElement.getElementsByClassName('KittyCard-subname')[0].innerText.split('Gen ').pop();
                }
                element.innerHTML += "<div class='extWrapper'><ul style='list-style: none;' class='extBounce extAttUl'>üêà</ul></div>";
                if ('id'+id in storageMyTbl) {
                    console.log('KittyExtension: Retrieved - '+ id);
                    finalizeOverlay(storageMyTbl['id'+id], element, stats);
                } else if ('id'+id in storageTbl) {
                    console.log('KittyExtension: Retrieved - '+ id);
                    finalizeOverlay(storageTbl['id'+id], element, stats);
                } else {
                    console.log('KittyExtension: Requesting - '+ id);
                    requestId(element, stats);
                }
            }
        }
    }
    $( "body").on( "mouseover", "a", overlay);

    //Updates attributes on specific kitty page
    setInterval(() => {
        let curPage = document.getElementsByClassName("KittyHeader-details");
        if (curPage.length > 0 && curPage[0].innerHTML.substr(0, curPage[0].innerHTML.indexOf('</span>')) != curCat) {
            curCat = curPage[0].innerHTML.substr(0, curPage[0].innerHTML.indexOf('</span>'));
            if (document.getElementsByClassName("ListAttributes-item").length > 0) {
                let cattributes = document.getElementsByClassName("ListAttributes-item");

                for (let att in cattributes) {
                    if (cattributes[att].style) {
                        let catt = cattributes[att].innerText;
                        let arr = getColor(catt);
                        let color = arr[0];
                        let num = arr[1];
                        cattributes[att].style.backgroundColor = color;
                        cattributes[att].style.color = color == 'white' ? '#000' : '#fff';
                        cattributes[att].innerHTML += num;
                    }
                }
            }
        }
    }, 2000);

    function calcPrice(id, cattributes, stats, element) {
        let base = "https://api.cryptokitties.co/auctions";
        let query = "?type=sale&limit=15&sorting=cheap&orderBy=current_price&orderDirection=asc&sorting=cheap&status=open&search=";
        let totalGen = ' gen:'+stats.gen;
        if (stats.gen >= 10) {
            totalGen += ' gen:'+(stats.gen-1)+' gen:';
            totalGen += parseInt(stats.gen)+1;
        }
        let rareTbl = getBestRares(cattributes);
        let search = totalGen + rareTbl[0];

        function finishPrice(data, index) {
            let newMultiplier = stats.id == data.auctions[index].kitty.id ? 1 : rareTbl[1];
            let nomralizePrice = data.auctions[index].current_price/1000000000000000000;
            return (nomralizePrice*newMultiplier).toFixed(2);
        }
        $.getJSON( base+query+search, (data) => {
            if (data.total > 0) {
                if (data.total == 1) {
                    if (data.auctions[0].kitty.id == id) {
                        renderPrice(element, 'Name your price', query + search, false);
                    } else {
                        renderPrice(element, finishPrice(data, 0), query + search, true);
                    }
                } else {
                    let cdTbl = ["Fast", "Swift", "Snappy", "Brisk", "Plodding", "Slow", "Sluggish", "Catatonic"];
                    let cdValueTbl = ["Fast","Swift","Swift","Snappy","Snappy","Brisk","Brisk","Plodding","Plodding","Slow","Slow","Sluggish","Sluggish","Catatonic"];
                    for (let x in data.auctions) {
                        let cdValue = cdTbl.indexOf(cdValueTbl[data.auctions[x].kitty.status.cooldown_index]);
                        if (stats.cd && stats.fast > 1) {
                            renderPrice(element, finishPrice(data, x), query + search, false);
                            return;
                        } else if (stats.fast > 4 ||  stats.fast >= cdValue) {
                            renderPrice(element, finishPrice(data, x), query + search, false);
                            return;
                        } else if (stats.cd && data.auctions[x].kitty.status.is_ready) {
                            renderPrice(element, finishPrice(data, x), query + search, false);
                            return;
                        } if (x == data.auctions.length - 1) {
                            renderPrice(element, finishPrice(data, x), query + search, true);
                            return;
                        }
                    }


                }
            } else {
                renderPrice(element, 'Name your price', query + search, false);
            }
        }).fail(() => {

        });
    }

    function renderPrice(element, price, url, fast) {
        if (price >= 50) {
            price = Math.ceil(price / 10) * 10;
            price += '+';
        } else if (fast) {
            price += '+';
        }
        let ul = element.getElementsByClassName("extWrapper")[0];
        ul.innerHTML += "<ul class='extAttUl' onclick='searchSimilarKitties(event, &quot;"+ url +"&quot;)'><li style='list-style: none;' class='extAtt'><span style='font-weight: 500;'>value:</span> " + price + "</li></ul>";
    }

    function getBestRares(cattributes, adjust) {
        let newCatts = [];
        for (let single in cattributes) {
            newCatts.push(cattributes[single].description);
        }
        cattributes = newCatts;
        let best = '';
        let hasRare = false;
        let count = adjust || 0;

        if (cattributes.length === 0) {
            hasRare = ' type:fancy';
        }
        for (let x in cattributes) {
            if (!tbl[cattributes[x]]) {
                best += ' ' + x;
                count += 3;
                hasRare = ' ' + x;
            }
        }
        let multiplier = 1;
        let multCount = 0;
        for (let key1 in tbl) {
            if (cattributes[key1]){
                if (tbl[key1].count <= 0.4) {
                    multCount += 6;
                    if (multCount > 3) {
                        multiplier *= 1.25;
                    }
                } else if(tbl[key1].count <= 1.8) {
                    multCount += 3;
                    if (multCount > 3) {
                        multiplier *= 1.15;
                    }
                } else if (tbl[key1].count <= 5) {
                    multCount += 2;
                    if (multCount >= 6) {
                        multiplier *= 1.05;
                    }
                } else if (tbl[key1].count <= 10) {
                    multCount += 1;
                    if (multCount >= 6) {
                        multiplier *= 1.025;
                    }
                }
            }
        }
        for (let key in tbl) {
            if (cattributes.includes(key)) {
                best += ' ' + key;
                if (tbl[key].count <= 1.2) {
                    count += 3;
                    hasRare = ' '+key;
                } else if (tbl[key].count <= 6) {
                    count += 3;
                }
            }
            if (count >= 3) {
                return [' ' + best, multiplier];
            }
        }
        return [hasRare ? hasRare : '', multiplier];
    }

    document.searchSimilarKitties = (e, query) => {
        e.preventDefault();
        window.location.href = "https://www.cryptokitties.co/marketplace/sale" + query;
    };

    function changePrices() {
        let items = document.getElementsByClassName('KittyStatus-itemText');
        if (ethPrice && items.length > 0 && document.getElementsByClassName('extUSD').length > 0) {
            for (let item of items) {
                if (item.parentElement.parentElement.className == "KittyStatus" || item.parentElement.parentElement.className == "KittyStatus KittyStatus--list") {
                    let cur = item.getElementsByTagName('span')[0].innerText.split(' ');
                    if (currency == "üí≤üëç" && cur[0] != "$") {
                        item.getElementsByTagName('span')[0].innerText = '$ ' + (cur[1] * ethPrice ).toFixed(2);
                    } else if (currency == "üí≤üëé" && cur[0] != "Œû") {
                        item.getElementsByTagName('span')[0].innerText = 'Œû ' + (cur[1] / ethPrice ).toFixed(2);
                    }
                }
            }
        }
    }

    let saleNum = 0;
    document.switchPrice = (e) => {
        e.preventDefault();
        hasChanged = true;
        let element = document.getElementsByClassName('extUSD')[0];
        currency = currency == "üí≤üëç" ? "üí≤üëé" : "üí≤üëç";
        localStorage.setItem('kittyExtensionEtherUSD', currency);
        element.innerText = currency;
        changePrices();
    };

    $(document).bind('DOMSubtreeModified',function(){
        let items = document.getElementsByClassName('KittyStatus-itemText');
        if (items.length != saleNum) {
            saleNum = items.length;
            if (hasChanged || currency == "üí≤üëç") {
                changePrices();
            }
        }
    });
});
